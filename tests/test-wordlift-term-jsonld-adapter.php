<?php
/**
 * Tests the wordlift test jsonld adapter class.
 *
 * @since 3.26.0
 * @author Naveen Muthusamy <naveen@wordlift.io>
 * @package    Wordlift
 * @subpackage Wordlift/tests
 */

class Wordlift_Term_Jsonld_Adapter_Test extends Wordlift_Unit_Test_Case {
	/**
	 * @var Wordlift_Term_JsonLd_Adapter instance.
	 */
	private $adapter;

	function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->adapter = new Wordlift_Term_JsonLd_Adapter( Wordlift_Entity_Uri_Service::get_instance(), Wordlift_Jsonld_Service::get_instance() );
	}

	public function test_if_less_than_2_posts_are_present_then_dont_alter_the_jsonld() {
		// lets create a category
		$category_id = wp_insert_category( array( 'cat_name' => 'foo' ) );
		$result      = $this->adapter->get_carousel_jsonld( array() );
		$this->assertEquals( $result, array() );
	}

	public function test_if_more_than_2_posts_present_then_add_jsonld() {
		// lets create a category
		$category_id = wp_insert_category( array( 'cat_name' => 'foo' ) );

		// Add 2 posts
		$first_post = $this->factory->post->create( array(
			'post_title' => 'foo'
		) );
		wp_set_post_categories( $first_post, array( $category_id ) );

		$second_post = $this->factory->post->create( array(
			'post_title' => 'bar'
		) );
		wp_set_post_categories( $second_post, array( $category_id ) );

		$args = array(
			'tax_query' => array(
				array(
					'taxonomy' => 'category',
					'field' => 'term_id',
					'terms' => $category_id
				)
			)
		);
		/**
		 * Emulating the query on the taxonomy page.
		 */
		global $wp_query;
		$wp_query = new WP_Query( $args );

		// get json ld data
		$result = $this->adapter->get_carousel_jsonld( array() );
		$result = $result['post_jsonld'];
		// the result should have key itemListElement.
		$this->assertArrayHasKey( 'itemListElement', $result );
		// the result should have 2 post jsonlds
		$this->assertCount( 2, $result['itemListElement'] );

		$single_item = $result['itemListElement'][0];
		$this->assertArrayHasKey( '@type', $single_item );
		$this->assertArrayHasKey( 'position', $single_item );
		$this->assertEquals( $single_item['@type'], 'ListItem' );
		$this->assertEquals( $single_item['position'], 1 );
	}

}
